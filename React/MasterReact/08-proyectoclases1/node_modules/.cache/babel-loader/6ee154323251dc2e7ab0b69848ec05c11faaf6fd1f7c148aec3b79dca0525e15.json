{"ast":null,"code":"var _jsxFileName = \"C:\\\\Develop\\\\Web\\\\React\\\\React\\\\MasterReact\\\\08-proyectoclases1\\\\src\\\\Componets\\\\Listado.js\";\nimport React, { Component } from 'react';\nimport Editar from './Editar';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default class Listado extends Component {\n  constructor(props) {\n    super(props);\n    /**\r\n     * Obtiene la lista de películas desde el almacenamiento local.\r\n     *\r\n     * La función recupera las películas almacenadas en localStorage bajo la clave \"generico\",\r\n     * las convierte de JSON a un objeto JavaScript y actualiza el estado `listadoPelicula` con estas películas.\r\n     *\r\n     * @returns {Array} La lista de películas obtenida desde el almacenamiento local.\r\n     */\n    this.conseguirPeliculas = () => {\n      let peliculas = JSON.parse(localStorage.getItem(\"generico\")) || [];\n      this.props.setListadoPelicula(peliculas);\n      return peliculas;\n    };\n    /**\r\n     * Elimina una película del almacenamiento local y actualiza el estado del listado.\r\n     *\r\n     * La función obtiene la lista de películas almacenadas en localStorage,\r\n     * filtra la lista para eliminar la película con el ID especificado,\r\n     * actualiza el estado `listadoPelicula` con la lista filtrada y\r\n     * guarda la lista actualizada en localStorage.\r\n     *\r\n     * @param {number|string} id - El ID de la película a eliminar.\r\n     */\n    this.borrarpelicula = id => {\n      let peliculas_almacenadas = this.conseguirPeliculas();\n      let actualizacion_peliculas = peliculas_almacenadas.filter(pelicula => pelicula.id !== parseInt(id));\n      console.log(peliculas_almacenadas, actualizacion_peliculas);\n      this.props.setListadoPelicula(actualizacion_peliculas);\n      localStorage.setItem('generico', JSON.stringify(actualizacion_peliculas));\n    };\n    this.state = {\n      editar: 0\n    };\n  }\n  componentDidMount() {\n    console.log(\"Componente cargado de películas\");\n    this.conseguirPeliculas();\n  }\n  render() {\n    const {\n      listadoPelicula\n    } = this.props;\n    const {\n      editar\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: Array.isArray(listadoPelicula) && listadoPelicula.length > 0 ?\n      // Renderizar el contenido solo si listadoPelicula es un array y tiene elementos\n      listadoPelicula.map(pelicula =>\n      /*#__PURE__*/\n      // Aquí renderizas cada elemento de listadoPelicula\n      _jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: pelicula.titulo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: pelicula.descripcion\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 29\n        }, this)]\n      }, pelicula.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 25\n      }, this)) :\n      /*#__PURE__*/\n      // Mostrar un mensaje o componente alternativo si listadoPelicula no es válido\n      _jsxDEV(\"p\", {\n        children: \"No hay pel\\xEDculas para mostrar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this)\n    }, void 0, false);\n  }\n}","map":{"version":3,"names":["React","Component","Editar","jsxDEV","_jsxDEV","Fragment","_Fragment","Listado","constructor","props","conseguirPeliculas","peliculas","JSON","parse","localStorage","getItem","setListadoPelicula","borrarpelicula","id","peliculas_almacenadas","actualizacion_peliculas","filter","pelicula","parseInt","console","log","setItem","stringify","state","editar","componentDidMount","render","listadoPelicula","children","Array","isArray","length","map","titulo","fileName","_jsxFileName","lineNumber","columnNumber","descripcion"],"sources":["C:/Develop/Web/React/React/MasterReact/08-proyectoclases1/src/Componets/Listado.js"],"sourcesContent":["import React, { Component } from 'react'\r\nimport Editar from './Editar';\r\n\r\nexport default class Listado extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            editar: 0\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(\"Componente cargado de películas\");\r\n        this.conseguirPeliculas();\r\n    }\r\n\r\n    /**\r\n     * Obtiene la lista de películas desde el almacenamiento local.\r\n     *\r\n     * La función recupera las películas almacenadas en localStorage bajo la clave \"generico\",\r\n     * las convierte de JSON a un objeto JavaScript y actualiza el estado `listadoPelicula` con estas películas.\r\n     *\r\n     * @returns {Array} La lista de películas obtenida desde el almacenamiento local.\r\n     */\r\n    conseguirPeliculas = () => {\r\n        let peliculas = JSON.parse(localStorage.getItem(\"generico\")) || [];\r\n        this.props.setListadoPelicula(peliculas);\r\n        return peliculas;\r\n    };\r\n\r\n    /**\r\n     * Elimina una película del almacenamiento local y actualiza el estado del listado.\r\n     *\r\n     * La función obtiene la lista de películas almacenadas en localStorage,\r\n     * filtra la lista para eliminar la película con el ID especificado,\r\n     * actualiza el estado `listadoPelicula` con la lista filtrada y\r\n     * guarda la lista actualizada en localStorage.\r\n     *\r\n     * @param {number|string} id - El ID de la película a eliminar.\r\n     */\r\n    borrarpelicula = (id) => {\r\n        let peliculas_almacenadas = this.conseguirPeliculas();\r\n        let actualizacion_peliculas = peliculas_almacenadas.filter(pelicula => pelicula.id !== parseInt(id));\r\n        console.log(peliculas_almacenadas, actualizacion_peliculas);\r\n        this.props.setListadoPelicula(actualizacion_peliculas);\r\n        localStorage.setItem('generico', JSON.stringify(actualizacion_peliculas));\r\n    };\r\n\r\n    render() {\r\n        const { listadoPelicula } = this.props;\r\n        const { editar } = this.state;\r\n        \r\n        return (\r\n            <>\r\n                {Array.isArray(listadoPelicula) && listadoPelicula.length > 0 ? (\r\n                    // Renderizar el contenido solo si listadoPelicula es un array y tiene elementos\r\n                    listadoPelicula.map((pelicula) => (\r\n                        // Aquí renderizas cada elemento de listadoPelicula\r\n                        <div key={pelicula.id}>\r\n                            {/* Aquí puedes mostrar los detalles de cada película */}\r\n                            <h2>{pelicula.titulo}</h2>\r\n                            <p>{pelicula.descripcion}</p>\r\n                        </div>\r\n                    ))\r\n                ) : (\r\n                    // Mostrar un mensaje o componente alternativo si listadoPelicula no es válido\r\n                    <p>No hay películas para mostrar</p>\r\n                )}\r\n            </>\r\n        );\r\n    }\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,MAAM,MAAM,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE9B,eAAe,MAAMC,OAAO,SAASN,SAAS,CAAC;EAC3CO,WAAWA,CAACC,KAAK,EAAE;IACf,KAAK,CAACA,KAAK,CAAC;IAWhB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;IAPI,KAQAC,kBAAkB,GAAG,MAAM;MACvB,IAAIC,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,EAAE;MAClE,IAAI,CAACN,KAAK,CAACO,kBAAkB,CAACL,SAAS,CAAC;MACxC,OAAOA,SAAS;IACpB,CAAC;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IATI,KAUAM,cAAc,GAAIC,EAAE,IAAK;MACrB,IAAIC,qBAAqB,GAAG,IAAI,CAACT,kBAAkB,CAAC,CAAC;MACrD,IAAIU,uBAAuB,GAAGD,qBAAqB,CAACE,MAAM,CAACC,QAAQ,IAAIA,QAAQ,CAACJ,EAAE,KAAKK,QAAQ,CAACL,EAAE,CAAC,CAAC;MACpGM,OAAO,CAACC,GAAG,CAACN,qBAAqB,EAAEC,uBAAuB,CAAC;MAC3D,IAAI,CAACX,KAAK,CAACO,kBAAkB,CAACI,uBAAuB,CAAC;MACtDN,YAAY,CAACY,OAAO,CAAC,UAAU,EAAEd,IAAI,CAACe,SAAS,CAACP,uBAAuB,CAAC,CAAC;IAC7E,CAAC;IAxCG,IAAI,CAACQ,KAAK,GAAG;MACTC,MAAM,EAAE;IACZ,CAAC;EACL;EAEAC,iBAAiBA,CAAA,EAAG;IAChBN,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;IAC9C,IAAI,CAACf,kBAAkB,CAAC,CAAC;EAC7B;EAkCAqB,MAAMA,CAAA,EAAG;IACL,MAAM;MAAEC;IAAgB,CAAC,GAAG,IAAI,CAACvB,KAAK;IACtC,MAAM;MAAEoB;IAAO,CAAC,GAAG,IAAI,CAACD,KAAK;IAE7B,oBACIxB,OAAA,CAAAE,SAAA;MAAA2B,QAAA,EACKC,KAAK,CAACC,OAAO,CAACH,eAAe,CAAC,IAAIA,eAAe,CAACI,MAAM,GAAG,CAAC;MACzD;MACAJ,eAAe,CAACK,GAAG,CAAEf,QAAQ;MAAA;MACzB;MACAlB,OAAA;QAAA6B,QAAA,gBAEI7B,OAAA;UAAA6B,QAAA,EAAKX,QAAQ,CAACgB;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAC1BtC,OAAA;UAAA6B,QAAA,EAAIX,QAAQ,CAACqB;QAAW;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA,GAHvBpB,QAAQ,CAACJ,EAAE;QAAAqB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIhB,CACR,CAAC;MAAA;MAEF;MACAtC,OAAA;QAAA6B,QAAA,EAAG;MAA6B;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IACtC,gBACH,CAAC;EAEX;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}